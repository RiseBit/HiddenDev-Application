---\ Services
local RS = game:GetService("ReplicatedStorage")

---\ RemoteEvents
local REFolder = RS:WaitForChild("GuiRE")
local AddRE = REFolder.Add
local SubtractRE = REFolder.Subtract
local ExitRE = REFolder.Exit
local BuyRE = REFolder.Buy

---/ UIS
local MainFrame = script.Parent
local ShopFrame = MainFrame:WaitForChild("ShopFrame")
local DisplayFrame = MainFrame:WaitForChild("ItemFrame")
local ScrollDisplay = DisplayFrame:WaitForChild("ScrollingFrame")
local Scroll = ShopFrame:WaitForChild("ScrollingFrame")
local Add = MainFrame:WaitForChild("Add")
local Subtract = MainFrame:WaitForChild("Subtract")
local Exit = MainFrame:WaitForChild("Exit")
local Buy = MainFrame:WaitForChild("Buy")

---\ Modules
local UIEffectsModule = require(script.ModuleScript)

---\ Values
local Ingredient = RS:WaitForChild("Ingredient")

---\ Variables
local buttons = {}
local clickingState = {}
local selectedItem = nil
local basketCounts = {}

local function setupButtons()
	for _, v in ipairs(Scroll:GetDescendants()) do
		if not v:IsA("TextButton") then continue end

		table.insert(buttons, v)
		v.Parent.PriceLabel.Text = tostring(Ingredient[v.Name.."Price"].Value)
		v.Parent.NameLabel.Text = v.Name
		v.BackgroundColor3 = Color3.new(0.498039, 0.498039, 0.498039)
		clickingState[v.Name] = false
		basketCounts[v.Name] = 0
	end
end

local function updateDisplayLabel(itemName)
	local label = ScrollDisplay:FindFirstChild(itemName.."Label")

	if basketCounts[itemName] == 1 and not label then
		label = Instance.new("TextLabel")
		label.Parent = ScrollDisplay
		label.Name = itemName.."Label"
		label.Size = UDim2.new(1, 0, 0, 50)
		label.TextScaled = true
		label.BackgroundTransparency = 1
		label.TextXAlignment = Enum.TextXAlignment.Left
	end

	if label then
		label.Text = itemName.." ".. basketCounts[itemName].."x"
	end
end

local function clearDisplay()
	for _, v in ipairs(ScrollDisplay:GetChildren()) do
		if v:IsA("TextLabel") then
			v:Destroy()
		end
	end
end

local function resetState()
	for key, _ in pairs(basketCounts) do
		basketCounts[key] = 0
	end

	for key, _ in pairs(clickingState) do
		clickingState[key] = false
	end

	selectedItem = nil
end

local function handleItemSelection(button)
	if clickingState[button.Name] then
		clickingState[button.Name] = false
		button.BackgroundTransparency = 1
		selectedItem = nil
		return
	end

	if selectedItem then
		for _, btn in ipairs(buttons) do
			if btn.Name == selectedItem then
				clickingState[btn.Name] = false
				btn.BackgroundTransparency = 1
				break
			end
		end
	end

	clickingState[button.Name] = true
	button.BackgroundTransparency = 0.7
	selectedItem = button.Name
end

---\ Initialize
UIEffectsModule.Init(MainFrame)
setupButtons()

---\ Button Setup
for _, button in ipairs(buttons) do
	button.MouseButton1Up:Connect(function()
		handleItemSelection(button)
	end)
end

Add.MouseButton1Up:Connect(function()
	if not selectedItem or not clickingState[selectedItem] then return end

	AddRE:FireServer(selectedItem)
	basketCounts[selectedItem] += 1
	updateDisplayLabel(selectedItem)
end)

Subtract.MouseButton1Up:Connect(function()
	if not selectedItem or not clickingState[selectedItem] then return end
	if basketCounts[selectedItem] <= 0 then return end

	SubtractRE:FireServer(selectedItem)
	basketCounts[selectedItem] -= 1
	updateDisplayLabel(selectedItem)
end)

Exit.MouseButton1Up:Connect(function()
	MainFrame.Enabled = false
	resetState()
	clearDisplay()
	ExitRE:FireServer(basketCounts)
end)

Buy.MouseButton1Up:Connect(function()
	BuyRE:FireServer(basketCounts)
end)

BuyRE.OnClientEvent:Connect(function(status)
	if status then
		resetState()
		clearDisplay()
	else
		print("Failed to buy items.")
	end
end)
