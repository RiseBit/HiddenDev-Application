---\ Services
local RS = game:GetService("ReplicatedStorage")
local Ingredient = require(script.Ingredient)

---\ References
local Shop = workspace:WaitForChild("Shop")

---\ RE
local REFolder = RS:WaitForChild("GuiRE")
local AddRE = REFolder.Add
local SubtractRE = REFolder.Subtract
local ExitRE = REFolder.Exit
local Buy = REFolder.Buy

local playerBoxesAmount = {}

local ShopSystem = {}

function ShopSystem:BoxCalc(quantity, maxCapacity)
	for itemName, amount in pairs(quantity) do
		if amount <= 0 then continue end
		if not Ingredient[itemName] then
			warn("Unknown item: " .. itemName)
			continue 
		end

		local sizeKey = itemName.."Size"
		if not Ingredient[itemName][sizeKey] then
			warn("Size not defined for: " .. itemName)
			continue
		end

		local itemSize = Ingredient[itemName][sizeKey]
		local boxesNeeded = math.ceil(amount / maxCapacity)
		local remainingAmount = amount

		for i = 1, boxesNeeded do
			local amountInThisBox = math.min(remainingAmount, maxCapacity)
			remainingAmount -= amountInThisBox

			local newBox = RS.Box:Clone()
			newBox.Parent = workspace

			newBox:SetAttribute("ItemName", itemName)
			newBox:SetAttribute("Amount", amountInThisBox)
			newBox:PivotTo(Shop:GetPivot() + Vector3.new(-15, 0, -10))

			newBox.ProximityPrompt.Triggered:Connect(function(plr)
				playerBoxesAmount[plr.UserId] = playerBoxesAmount[plr.UserId] or 0

				local actualBoxCount = 0
				for _, item in pairs(plr.Character:GetChildren()) do
					if item:GetAttribute("ItemName") then
						actualBoxCount += 1
					end
				end

				playerBoxesAmount[plr.UserId] = actualBoxCount

				if playerBoxesAmount[plr.UserId] >= 3 then
					print("You are carrying too much!")
					return
				end

				newBox.Parent = plr.Character
				playerBoxesAmount[plr.UserId] += 1
				print(playerBoxesAmount[plr.UserId])

				local boxOrientation = CFrame.lookAt(
					Vector3.new(0, 0, 0),
					plr.Character.Torso.CFrame.LookVector
				)

				local boxPosition
				if playerBoxesAmount[plr.UserId] == 1 then
					boxPosition = plr.Character.Torso.Position + 
						plr.Character.Torso.CFrame.LookVector * 2.3
				else
					boxPosition = plr.Character.Torso.Position + 
						Vector3.new(0, 3 * playerBoxesAmount[plr.UserId] - 3, 0) + 
						plr.Character.Torso.CFrame.LookVector * 2.3
				end

				newBox.CFrame = CFrame.new(boxPosition) * boxOrientation

				local weld = Instance.new("WeldConstraint")
				weld.Parent = newBox     
				weld.Part0 = newBox        
				weld.Part1 = plr.Character.Torso 

				task.wait(0.1)
				newBox.ProximityPrompt:Destroy()
			end)
		end
	end
end

function ShopSystem:Buy(plr, basket)
	if not plr then return false end

	local coins = plr.leaderstats.Coins.Value 
	local totalRequired = 0

	for itemName, amount in pairs(basket) do
		if amount <= 0 then continue end
		if not Ingredient[itemName] then continue end

		local priceKey = itemName.."Price"
		if not Ingredient[itemName][priceKey] then continue end

		local itemPrice = Ingredient[itemName][priceKey]
		totalRequired += amount * itemPrice
	end

	if coins < totalRequired then return false end

	plr.leaderstats.Coins.Value -= totalRequired
	ShopSystem:BoxCalc(basket, 10)

	for itemName, _ in pairs(basket) do
		basket[itemName] = 0
	end

	return true, basket
end

function ShopSystem:Add(itemName)
	return Ingredient[itemName] ~= nil
end

function ShopSystem:Subtract(itemName)
	return Ingredient[itemName] ~= nil
end

function ShopSystem:Exit(basketCounts)
	for key, _ in pairs(basketCounts) do
		basketCounts[key] = 0
	end
end

return ShopSystem
